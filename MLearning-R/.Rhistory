library(caret); library(kernlab); data("spam")
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
training$capAve <- training$capitalAve
selectNa <- rbinom(dim(training)[1], size = 1, prob = .05) == 1
training$capAve[selectNa] <- NA
preObj <- preProcess(training[,-58], method='knnImpute')
capAve <- predict(preObj, training[,-58])$capAve
install.packages('RANN')
preObj <- preProcess(training[,-58], method='knnImpute')
capAve <- predict(preObj, training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((capAve- capAveTruth)[!selectNa])
quantile((capAve - capAveTruth)[selectNa])
library(c(ISLR, caret)
library(c(ISLR, caret))
library(c(ISLR, caret))
library(ISLR);library(caret);
library(ISLR);library(caret);data("Wage");
library(ISLR);library(caret);data("Wage");
library(ISLR);library(caret);data(Wage);
inTrain <- createDataPartition(y=Wage$wage, p = 0.7, list = FALSE)
inTrain
train <- Wage[inTrain,]; test <- Wage[-inTrain,]
table(train$jobclass)
head(predict(dummies, newdata=train))
dummies <- dummyVars(wage ~ jobclass, data = train)
head(predict(dummies, newdata=train))
install.packages('editR')
devtools::install_github('trestletech/shinyAce')
install.packages('devtools')
devtools::install_github("trestletech/shinyAce")
devtools::install_github("swarm-lab/editR")
library(editR)
editR("E:\Documents\STAT308\Regressional_Analysis\opperation_reg_model\survival_pred.Rmd")
editR("E:\\Documents\\STAT308\\Regressional_Analysis\\opperation_reg_model\\survival_pred.Rmd")
library(ISLR);library(caret);data(Wage);
inTrain <- createDataPartition(y=Wage$wage, p = 0.7, list = FALSE)
train <- Wage[inTrain,]; test <- Wage[-inTrain,]
#Common covars to add, dummy variables
table(train$jobclass)
#create dummy var aka creating levels for regression
dummies <- dummyVars(wage ~ jobclass, data = train)
head(predict(dummies, newdata=train))
nsv
nsv <- nearZeroVar(train, saveMetrics = TRUE)
nsv
library(splines)
bsBasis <- bs(train$age,df=3)
bsBasis
bsBasis.head()
head(bsBasis)
lm! <- lm(wage ~ bsBasis, data = train)
lm! <- lm(wage ~ bsBasis, data = train)
lm <- lm(wage ~ bsBasis, data = train)
plot(train$age,train$wage,pch=19,cex=.5)
points(train$age,predict(lm1), col='red',pch=19,ce=.5)
lm1 <- lm(wage ~ bsBasis, data = train)
plot(train$age,train$wage,pch=19,cex=.5)
points(train$age,predict(lm1), col='red',pch=19,ce=.5)
predict(bsBasis, age=test$age)
plot(test$age, test$wage, pch=19,cex=.5)
points(test$age,predict(lm1), col='red',pch=19,ce=.5)
points(train$age,predict(lm1), col='red',pch=19,ce=.5)
M <- abs(cor(training[,-58]))
library(caret)
library(kernlab)
data("spam")
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
which(M>0.8,arr.ind = T)
M <- abs(cor(training[,-58]))
diag(M)<- 0
which(M>0.8,arr.ind = T)
library(caret)
library(kernlab)
data("spam")
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M)<- 0
which(M>0.8,arr.ind = T)
names(spam[c(34,32)])
plot(spam[,34],spam[,32])
